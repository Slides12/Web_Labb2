@page "/auth/register"

@inject AuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Register</h3>

<EditForm class="new-blog-form" Model="@registerRequest" OnValidSubmit="HandleValidSubmit" FormName="registerForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="role" class="col-sm-2 col-form-label">Role</label>
        <div class="col-sm-10">
            <InputText id="role" class="form-control" @bind-Value="registerRequest.Role" placeholder="Role" />
            <ValidationMessage For="@(() => registerRequest.Role)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="username" class="col-sm-2 col-form-label">Username</label>
        <div class="col-sm-10">
            <InputText id="username" class="form-control" @bind-Value="registerRequest.Username" placeholder="Username" />
            <ValidationMessage For="@(() => registerRequest.Username)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="password" class="col-sm-2 col-form-label">Password</label>
        <div class="col-sm-10">
            <InputText type="password" id="password" class="form-control" @bind-Value="registerRequest.Password" placeholder="Password" />
            <ValidationMessage For="@(() => registerRequest.Password)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="password" class="col-sm-2 col-form-label">Confirm Password</label>
        <div class="col-sm-10">
            <InputText type="confirmpassword" id="password" class="form-control" @bind-Value="registerRequest.ConfirmPassword" placeholder="Password" />
            <ValidationMessage For="@(() => registerRequest.ConfirmPassword)" />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">Register</button>
        </div>
    </div>
</EditForm>

@code {
    private UserDTO registerRequest = new UserDTO();

    private async Task HandleValidSubmit()
    {
        registerRequest.Role = "Admin"; // Assuming default role is "Admin"
        var registerResponse = await AuthService.Register(registerRequest);

        if (registerResponse)
        {
            NavigationManager.NavigateTo("/auth/login");
        }
        else
        {
            // Optional: Display error message if registration fails
            // You can handle this by showing a message or alert, or logging the error
        }
    }
}
