@page "/user"
@using System.Security.Claims
@using Web_Labb2.Shared.DTO_s
@using MudBlazor
@inject APIClient APIClient
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="pa-6 mx-auto" Style="max-width:800px">
  <MudText Typo="Typo.h4" GutterBottom>My Profile</MudText>
  <MudButton Variant="Variant.Outlined"
             Color="Color.Primary"
             OnClick="EditProfile"
             Class="mb-4">
    Edit Profile
  </MudButton>

  @if (customer is null)
  {
    <MudProgressCircular Indeterminate="true" />
  }
  else
  {
    <MudGrid>
      <MudItem xs="12" sm="6"><MudText><b>First Name:</b> @customer.FirstName</MudText></MudItem>
      <MudItem xs="12" sm="6"><MudText><b>Last Name:</b>  @customer.LastName</MudText></MudItem>
      <MudItem xs="12"><MudText><b>Email:</b>      @customer.Email</MudText></MudItem>
      <MudItem xs="6"><MudText><b>Phone:</b>       @customer.PhoneNumber</MudText></MudItem>

      <MudDivider Class="my-4" />

      <MudItem xs="12"><MudText><b>Address:</b>    @customer.AddressInformation?.Address</MudText></MudItem>
      <MudItem xs="4"><MudText><b>Post Code:</b>    @customer.AddressInformation?.PostNumber</MudText></MudItem>
      <MudItem xs="4"><MudText><b>City:</b>         @customer.AddressInformation?.City</MudText></MudItem>
      <MudItem xs="4"><MudText><b>Country:</b>      @customer.AddressInformation?.Country</MudText></MudItem>
    </MudGrid>
  }

  <MudDivider Class="my-6" />

  <MudText Typo="Typo.h5" GutterBottom>My Orders</MudText>
  @if (orders is null)
  {
    <MudProgressCircular Indeterminate="true" />
  }
  else if (!orders.Any())
  {
    <MudText>No orders found.</MudText>
  }
  else
  {
    <MudExpansionPanels>
      @foreach (var ord in orders)
      {
                <MudExpansionPanel Text="@($"Order #{ord.OrderID} — {ord.OrderDate:d} — Total: {ord.TotalAmount} kr")">
          <MudTable Items="ord.OrderDetails" Dense="true" Elevation="0" Hover="false">
            <HeaderContent>
              <MudTh>Product</MudTh>
              <MudTh align="right">Qty</MudTh>
              <MudTh align="right">Unit Price</MudTh>
            </HeaderContent>
            <RowTemplate>
              <MudTd>@context.ProductName</MudTd>
              <MudTd align="right">@context.Quantity</MudTd>
              <MudTd align="right">@context.Price kr</MudTd>
            </RowTemplate>
          </MudTable>
        </MudExpansionPanel>
      }
    </MudExpansionPanels>
  }
</MudPaper>

@code {
  private CustomerDTO? customer;
  private List<OrderDTO>?  orders;

  protected override async Task OnInitializedAsync()
  {
    var auth = await AuthStateProvider.GetAuthenticationStateAsync();
    var name = auth.User.FindFirst(ClaimTypes.Name)?.Value;
    if (string.IsNullOrWhiteSpace(name)) return;

    var userDto = await APIClient
      .GetFromJsonAsync<UserDTO>($"https://localhost:7218/api/Auth/get-user/{name}");

    customer = await APIClient
      .GetFromJsonAsync<CustomerDTO>(
        $"https://localhost:7218/api/Customer/{Uri.EscapeDataString(userDto.Email)}");

    orders = await APIClient
      .GetFromJsonAsync<List<OrderDTO>>(
        $"https://localhost:7218/api/Order/orders/{customer.Id}");
  }

  private async Task EditProfile()
  {
    if (customer == null) return;

    var parameters = new DialogParameters { { "Customer", customer } };
    var options    = new DialogOptions    { CloseButton = true, MaxWidth = MaxWidth.Small };
    var dialogRef  = DialogService.Show<CustomerInfoDialog>("Edit Profile", parameters, options);

    var result = await dialogRef.Result;
    if (!result.Canceled)
    {
      customer = (CustomerDTO)result.Data!;
      Snackbar.Add("Profile updated!", Severity.Success);

      orders = await APIClient
        .GetFromJsonAsync<List<OrderDTO>>(
          $"https://localhost:7218/api/Order/orders/{customer.Id}");
    }
  }
}
