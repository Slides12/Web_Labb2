@inherits LayoutComponentBase
@inject CartService CartService
@inject NavigationManager Navigation
@inject APIClient APIClient


<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <a Href="/" Match="NavLinkMatch.All" Class="d-flex align-center">
            <MudImage Width="130" Height="100" Src="D-inet.png"></MudImage>
        </a>



        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudStack Spacing="2" Row>
                    <MudText Color="Color.Inherit">
                        Hello, <MudLink href="/user" Color="Color.Inherit">@context.User.Identity?.Name!</MudLink>
                    </MudText>
                    <MudText>|</MudText>
                    <MudLink Href="/logout" Color="Color.Inherit">Logout</MudLink>
                    <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
                    <MudIconButton Color="Color.Inherit" OnClick="@OpenCartDrawer">
                        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" />
                            <MudBadge Content="@CartService.CartItems.Count" Color="Color.Primary" Class="position-absolute" Style="top: -5px; right: -5px;" />
                        </MudStack>
                    </MudIconButton>
                </MudStack>
            </Authorized>
            <NotAuthorized>
                <MudStack Spacing="2" Row>
                    <MudText Color="Color.Inherit">
                        <MudLink href="/login" Color="Color.Inherit">Login</MudLink>
                    </MudText>
                    <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
                    <MudIconButton Color="Color.Inherit" OnClick="@OpenCartDrawer">
                        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" />
                            <MudBadge Content="@CartService.CartItems.Count" Color="Color.Primary" Class="position-absolute" Style="top: -5px; right: -5px;" />
                        </MudStack>
                    </MudIconButton>
                </MudStack>
            </NotAuthorized>
        </AuthorizeView>


    </MudAppBar>

    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>

    <MudDrawer @bind-Open="@_open" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary" Width="400px" Height="80%">
        <MudDrawerHeader>
            <MudStack Spacing="2" Row=true>
                <MudText Typo="Typo.h6">Cart</MudText>
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                    <MudBadge Content="@CartService.CartItems.Count" Color="Color.Primary" Class="position-absolute" Style="top: -5px; right: -5px;" />
                </MudStack>
            </MudStack>
        </MudDrawerHeader>
        <MudButton Color="Color.Success" OnClick="ClearCart">Clear Cart</MudButton>
        <MudButton Color="Color.Success" OnClick="Checkout">Checkout</MudButton>
        <MudList T="ProductDTO">
            @foreach(var product in CartService.CartItems)
            {
                <MudListItem>
                    <MudStack Spacing="12" Row=true>
                        <MudButton OnClick="() => GoToProductPage(product.ProductId)">
                            <MudStack>
                                <MudText Typo="Typo.subtitle1">@product.ProductName</MudText>
                                <MudText Typo="Typo.overline" Color="Color.Dark">
                                    Price: @(product?.Price.ToString("C"))
                                </MudText>
                            </MudStack>
                        </MudButton>
                        <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" @onclick="() => RemoveCurrentItem(product.ProductId)"/>
                    </MudStack>
                </MudListItem>
            }
        </MudList>
    </MudDrawer>

    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _open = false;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;



    protected async override Task OnInitializedAsync()
    {

        base.OnInitialized();
        CartService.OnCartChanged += StateHasChanged;

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
        CartService.LoadCart();
    }


    private async Task ClearCart()
    {
        await CartService.ClearCart();
    }

    private async Task Checkout()
    {
        _open = false;
        Navigation.NavigateTo("/checkout");
    }

    private void GoToCart()
    {
        Navigation.NavigateTo("/cart");
    }

    private void GoToProductPage(string productId)
    {
        Navigation.NavigateTo($"/product-page/{productId}");
        StateHasChanged();
    }

    private async Task RemoveCurrentItem(string productId)
    {
        await CartService.RemoveItemFromCart(productId);
    }


    private void OpenCartDrawer()
    {
        _open = true;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "rgba(255,255,255,0.8)",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
        Background = "#E5E4E2",

    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#343434",
        Surface = "#343434",
        Background = "#343434",
        BackgroundGray = "#343434",
        AppbarText = "#92929f",
        AppbarBackground = "#343434",
        DrawerBackground = "#343434",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#FFFFFF",
        TextSecondary = "#FFFFFF",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#FFFFFF",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    public void Dispose()
    {
        CartService.OnCartChanged -= StateHasChanged;
    }
}


