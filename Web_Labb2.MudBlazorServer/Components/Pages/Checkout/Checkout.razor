@page "/checkout"
@inject ISnackbar Snackbar
@inject APIClient ApiClient;
@inject CartService CartService;
@inject NavigationManager Navigation

<h3>Checkout</h3>

<EditForm Model="@customer" OnValidSubmit="SubmitCustomerAndOrder">
    <DataAnnotationsValidator />
    <MudStack Row=true>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Customer Information</MudText>
                        <MudTextField Label="First Name" HelperText="Enter your first name"
                        @bind-Value="customer.FirstName" For="@(() => customer.FirstName)" />
                        <MudTextField Label="Last Name" HelperText="Enter your last name"
                        @bind-Value="customer.LastName" For="@(() => customer.LastName)" />
                        <MudTextField Label="Email" HelperText="Enter your email address"
                        @bind-Value="customer.Email" For="@(() => customer.Email)" />
                        <MudTextField Label="Phone Number" HelperText="Enter your phone number"
                        @bind-Value="customer.PhoneNumber" For="@(() => customer.PhoneNumber)" />
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Address Information</MudText>
                        <MudTextField Label="Address" HelperText="Enter your address"
                        @bind-Value="customer.AddressInformation.Address" For="@(() => customer.AddressInformation.Address)" />
                        <MudTextField Label="Post Number" HelperText="Enter your post number"
                        @bind-Value="customer.AddressInformation.PostNumber" For="@(() => customer.AddressInformation.PostNumber)" />
                        <MudTextField Label="City" HelperText="Enter your city"
                        @bind-Value="customer.AddressInformation.City" For="@(() => customer.AddressInformation.City)" />
                        <MudTextField Label="Country" HelperText="Enter your country"
                        @bind-Value="customer.AddressInformation.Country" For="@(() => customer.AddressInformation.Country)" />
                    </MudCardContent>
                </MudCard>
            </MudItem>


        </MudGrid>

        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Order Information</MudText>
                        <MudTextField Label="Order Date" HelperText="Date of order" Type="date" Disabled
                        @bind-Value="order.OrderDate" For="@(() => order.OrderDate)" />
                        <MudTextField Label="Total Amount" HelperText="Total amount in kr." Disabled
                        @bind-Value="order.TotalAmount" For="@(() => order.TotalAmount)" />
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.subtitle2">Order Summary</MudText>
                    <MudList T="OrderDTO">
                        @foreach (var item in order.OrderDetails)
                        {
                            <MudListItem>
                                <MudText>Product Name: @item.ProductName</MudText>
                                <MudText>Product ID: @item.ProductID</MudText>
                                <MudText>Quantity: @item.Quantity</MudText>
                                <MudText>Price: @item.Price</MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper>
            </MudItem>

            <MudItem xs="12">
                <MudButton Disabled="@empty" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit Order</MudButton>
            </MudItem>
        </MudGrid>

    </MudStack>

</EditForm>

<MudSnackbarProvider />

@code {
    private CustomerDTO customer = new CustomerDTO() { FirstName="", LastName=""};

    private OrderDTO order = new OrderDTO();
    private bool empty = false;

    protected override async Task OnInitializedAsync()
    {
        customer = new CustomerDTO()
            {
                FirstName = "",
                LastName = "",
                AddressInformation = new AddressDTO()
                {
                    Address = "",
                    City = "",
                    Country = "",
                    PostNumber = ""
                }
            };

        order = new OrderDTO
            {
                OrderDate = DateTime.Now,
                OrderDetails = new List<OrderDetailDTO>(),
                Customer = customer
            };

        await CartService.LoadCart();

        order.OrderDetails = CartService.CartItems.Select(p => new OrderDetailDTO
            {
                ProductName = p.ProductName,
                ProductID = p.ProductId,
                Quantity = 1,
                Price = p.Price
            }).ToList();

        empty = order.OrderDetails.Count == 0;
        order.TotalAmount = order.OrderDetails.Sum(d => d.Price * d.Quantity);
    }


    private async Task SubmitCustomerAndOrder()
    {


        try
        {

            var existingCustomer = await ApiClient.GetFromJsonAsync<CustomerDTO>($"https://localhost:7218/api/Customer/{customer.Email}");

            if (existingCustomer != null)
            {

                order.CustomerID = existingCustomer.Id;
                order.Customer = existingCustomer;

                if (order.OrderDetails == null || !order.OrderDetails.Any())
                {
                    Console.WriteLine("Error: Order details are missing.");
                    Snackbar.Add($"Error: Order details are missing.", Severity.Error);

                    return;
                }

                var orderResponse = await ApiClient.PostAsync<OrderDTO, OrderDTO>("https://localhost:7218/api/Order", order);

                if (orderResponse != null)
                {
                    await CartService.ClearCart();
                    Snackbar.Add($"Order submitted successfully: { orderResponse.OrderID}" , Severity.Success);
                    Console.WriteLine("Order submitted successfully! ");
                    Navigation.NavigateTo("/");
                }
                else
                {
                    Snackbar.Add($"Failed to submit order.", Severity.Error);

                    Console.WriteLine("Failed to submit order.");
                }
            }
            else
            {
                Console.WriteLine("Customer does not exist. Creating new customer...");

                var customerResponse = await ApiClient.PostAsync<CustomerDTO, CustomerDTO>("https://localhost:7218/api/Customer", customer);

                if (customerResponse != null)
                {
                    Console.WriteLine("Customer created with ID: " + customerResponse.Id);

                    order.CustomerID = customerResponse.Id;
                    order.Customer = customer;

                    if (order.OrderDetails == null || !order.OrderDetails.Any())
                    {
                        Console.WriteLine("Error: Order details are missing.");
                        return;
                    }

                    Console.WriteLine("Submitting order...");
                    var orderResponse = await ApiClient.PostAsync<OrderDTO, OrderDTO>("https://localhost:7218/api/Order", order);

                    if (orderResponse != null)
                    {
                        await CartService.ClearCart();
                        Console.WriteLine("Order submitted successfully: " + orderResponse.OrderID);
                    }
                }
                
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error submitting customer and order: " + ex.Message);
        }
    }

}
