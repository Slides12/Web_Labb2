@page "/products"
@inject APIClient APIClient
@inject AuthenticationStateProvider AuthProvider


<PageTitle>Products</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">All our products</MudText>
<MudText Typo="Typo.body1" Class="mb-8">Show all our current products.</MudText>

@if (products == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="products" Hover="true" SortLabel="Sort By" Elevation="0" AllowUnsorted="false">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ProductDTO, object>(x=>x.ProductName)">Product Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProductDTO, object>(x=>x.ProductId)">Product Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProductDTO, object>(x=>x.Price)">Price</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProductDTO, object>(x=>x.ProductCategory)">Product Category</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProductDTO, object>(x=>x.Description!)">Description</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProductDTO, object>(x=>x.Status!)">Is Available</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ProductName">@context.ProductName</MudTd>
            <MudTd DataLabel="ProductId">@context.ProductId</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
            <MudTd DataLabel="ProductCategory">@context.ProductCategory</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Available">@context.Status</MudTd>
            @if (isAdmin)
            {
                <MudTd><MudButton OnClick="() => SetStatus(context.ProductId)">Status</MudButton></MudTd>
                <MudTd><MudButton>Edit</MudButton></MudTd>
                <MudTd><MudButton OnClick="() => DeleteProduct(context.ProductId)">Delete</MudButton></MudTd>
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {

    private List<ProductDTO> products = new List<ProductDTO>();
    private bool isAdmin;
    protected override async Task OnInitializedAsync()
    {

        products = await APIClient.GetFromJsonAsync<List<ProductDTO>>("https://localhost:7218/api/Product");

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        isAdmin = authState.User.IsInRole("Admin");
    }

    public async Task SetStatus(string id)
    {
        var productToUpdate = products.FirstOrDefault(p => p.ProductId == id);
        if (productToUpdate != null)
        {
            productToUpdate.Status = !productToUpdate.Status; // Assuming Status is a boolean (toggle availability)

            await APIClient.PutAsync<string, ProductDTO>($"https://localhost:7218/api/Product/status/{id}", productToUpdate);
            StateHasChanged();
        }
    }


    public async Task<bool> DeleteProduct(string id)
    {
        try
        {
            bool result = await APIClient.DeleteAsync($"https://localhost:7218/api/Product/{id}");
        
            if (result)
            {
                products = await APIClient.GetFromJsonAsync<List<ProductDTO>>("https://localhost:7218/api/Product");
                StateHasChanged();
            }
        
            return result;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error deleting product: {ex.Message}");
            return false;
        }
    }




  
}
