@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject ILocalStorageService LocalStorage
@rendermode InteractiveServer

<EditForm Model="@authRequest" OnValidSubmit="HandleValidSubmit">
    <div>
        <label>Username:</label>
        <InputText @bind-Value="authRequest.Username" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="authRequest.Password" />
    </div>
    <button type="submit">Login</button>
</EditForm>

@code {
    private LoginDTO authRequest = new LoginDTO();

    private async Task HandleValidSubmit()
    {
        var authResponse = await AuthService.Login(authRequest);

        if (authResponse != null)
        {
            // Save the token and notify authentication state change
            await LocalStorage.SetItemAsync("token", authResponse.Token);
            CustomAuthenticationStateProvider.NotifyUserAuthentication(authResponse.Token);
            NavigationManager.NavigateTo("/");
        }
    }
}
