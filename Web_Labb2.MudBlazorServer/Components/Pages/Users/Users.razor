@page "/users"
@using MudBlazor
@using Web_Labb2.Shared.DTO_s
@inject APIClient APIClient
@inject AuthenticationStateProvider AuthProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Users</PageTitle>

<MudText Typo="Typo.h3" GutterBottom>- Admin -</MudText>

@if (users is null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudTable Items="users" Hover="true" Striped="true">
        <HeaderContent>
            <MudTh>Username</MudTh>
            <MudTh>Role</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Username</MudTd>
            <MudTd>@context.Role</MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd>
                <MudButton Size="Size.Small"
                           Variant="Variant.Text"
                           Color="Color.Primary"
                           OnClick="() => UpdateUser(context)">
                    Update Account
                </MudButton>

                <MudButton Size="Size.Small"
                           Variant="Variant.Text"
                           Color="Color.Info"
                           OnClick="() => ShowCustomerProfile(context.Email)">
                    Edit Profile
                </MudButton>

                <MudButton Size="Size.Small"
                           Variant="Variant.Text"
                           Color="Color.Secondary"
                           OnClick="() => ShowUserOrders(context.Username)">
                    View Orders
                </MudButton>

                <MudButton Size="Size.Small"
                           Variant="Variant.Text"
                           Color="Color.Error"
                           OnClick="() => DeleteUser(context.Username)">
                    Delete
                </MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{25,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private List<UpdateUserDTO>? users;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthProvider.GetAuthenticationStateAsync();
        isAdmin = auth.User.IsInRole("Admin");
        if (isAdmin)
            users = await APIClient.GetFromJsonAsync<List<UpdateUserDTO>>(
                "https://localhost:7218/api/Auth");
    }

    async Task UpdateUser(UpdateUserDTO u)
    {
        var p = new DialogParameters { { "user", u } };
        await DialogService.ShowAsync<UpdateUserDialog>("Update Account", p);
    }

    async Task ShowCustomerProfile(string email)
    {
        var cust = await APIClient.GetFromJsonAsync<CustomerDTO>(
            $"https://localhost:7218/api/Customer/{Uri.EscapeDataString(email)}");

        var p = new DialogParameters { { "Customer", cust } };
        var opts = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var reference = DialogService.Show<CustomerInfoDialog>("Edit Profile", p, opts);

        var result = await reference.Result;
        if (!result.Canceled && result.Data is CustomerDTO updated)
        {
            Snackbar.Add($"Saved {updated.FirstName} {updated.LastName}", Severity.Success);
            users = await APIClient.GetFromJsonAsync<List<UpdateUserDTO>>(
                "https://localhost:7218/api/Auth");
            StateHasChanged();
        }
    }

    void ShowUserOrders(string username)
    {
        var p = new DialogParameters { { "Username", username } };
        var opts = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<UserOrdersDialog>("User Orders", p, opts);
    }

    async Task DeleteUser(string username)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this user? This action cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogRef = DialogService.Show<DeleteUserDialog>("Confirm Delete", parameters, options);
        var result = await dialogRef.Result;

        if (!result.Canceled && result.Data is bool ok && ok)
        {
            var success = await APIClient.DeleteAsync($"https://localhost:7218/api/Auth/{username}");
            if (success)
            {
                Snackbar.Add("User deleted", Severity.Success);
                users = await APIClient.GetFromJsonAsync<List<UpdateUserDTO>>(
                    "https://localhost:7218/api/Auth");
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Failed to delete user", Severity.Error);
            }
        }
    }
}
