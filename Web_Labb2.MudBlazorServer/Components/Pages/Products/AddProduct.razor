@page "/add-product"
@inject APIClient APIClient
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "Admin")]

<MudText Typo="Typo.h3" GutterBottom="true">-Admin-</MudText>
<MudText Typo="Typo.body1" Class="mb-8">Add product.</MudText>

<MudStack Spacing="20" Class="w-100 d-flex justify-center align-center mt-5">
    <MudPaper Elevation="3">
        <MudText Typo="Typo.h5" Align="Align.Center" >Add a product below, you can also add a image for this product. After creation it will not be visible until you set "Status" to true in "Edit products"</MudText>
    </MudPaper>

    <EditForm Model="@product" OnValidSubmit="OnValidSubmit" Class="text-center w-100">
        <DataAnnotationsValidator />
        <MudGrid Class="w-100">
            <MudItem Class="d-flex justify-center">
                <MudCard Class="w-100">
                    <MudCardContent>
                        <MudTextField Label="Product Name" HelperText="Asus rog gaming PC."
                                      @bind-Value="product.ProductName" For="@(() => product.ProductName)" />
                        <MudTextField Label="Price" Class="mt-3"
                                      @bind-Value="product.Price" For="@(() => product.Price)" />
                        <MudTextField Label="Product Category" HelperText="Component" Class="mt-3"
                                      @bind-Value="product.ProductCategory" For="@(() => product.ProductCategory)" />
                        <MudTextField Label="Product Id" HelperText="123898329" Class="mt-3"
                                      @bind-Value="product.ProductId" For="@(() => product.ProductId)" />
                        <MudTextField Label="Description" Lines="3" HelperText="This PC is the ultimate gaming pc." Class="mt-3"
                                      @bind-Value="product.Description" For="@(() => product.Description)" />
                    </MudCardContent>
                    <MudStack Spacing="20" Row="true">
                        <MudCardActions Class="d-flex justify-center">
                            <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFiles2" MaximumFileCount="100" Class="mr-2">
                                <ActivatorContent>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.CloudUpload">
                                        Add product image
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add Product</MudButton>
                        </MudCardActions>
                    </MudStack>

                </MudCard>
            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.body2" Align="Align.Center">
                    @if (success)
                    {
                        <MudText Color="Color.Success">Success</MudText>
                    }
                    else
                    {
                        <MudText Color="@Color.Error">
                            <ValidationSummary />
                        </MudText>
                    }
                </MudText>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudStack>




@code {
    private ProductDTO product = new ProductDTO(){ ProductName = "", ProductCategory = "", ProductId = ""};
    IList<IBrowserFile> files = new List<IBrowserFile>();
    bool success;

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            if (!string.IsNullOrEmpty(product.ProductId) || string.IsNullOrEmpty(product.ProductName))
            {
                await APIClient.PostAsync<string, ProductDTO>("https://localhost:7218/api/Product", product);
                Snackbar.Add($"{product.ProductName} added.", Severity.Success);

                success = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            success = false;
        }
        StateHasChanged();
    }

    

    private async Task UploadFiles2(IBrowserFile file)
    {
        try
        {
            string imagePath = await APIClient.PostFileAsync("https://localhost:7218/api/Product/upload-image", file);

            if (!string.IsNullOrEmpty(imagePath))
            {
                product.ImagePath = imagePath; // Use the full URL now!
                Console.WriteLine($"UploadFiles2: Image URL stored -> {product.ImagePath}");
            }
            else
            {
                Console.WriteLine("UploadFiles2: Image path is empty after upload!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading image: {ex.Message}");
        }
    }







}
