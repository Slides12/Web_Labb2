@page "/users"
@inject APIClient APIClient
@inject AuthenticationStateProvider AuthProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<PageTitle>Users</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">-Admin-</MudText>
<MudText Typo="Typo.body1" Class="mb-8">Edit users.</MudText>

@if (users == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="users" Hover="true" SortLabel="Sort By" Elevation="0" AllowUnsorted="false">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<UpdateUserDTO, object>(x=>x.Username)">Username</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UpdateUserDTO, object>(x=>x.Role)">Role</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UpdateUserDTO, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Username">@context.Username</MudTd>
            <MudTd DataLabel="Role">@context.Role</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            @if (isAdmin)
            {
                <MudTd><MudButton >Status</MudButton></MudTd>
                <MudTd><MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@((e) => UpdateUser(context))">Update</MudButton></MudTd>
                <MudTd><MudButton @onclick="() => DeleteUser(context.Username)" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton></MudTd>
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {

    private List<UpdateUserDTO> users = new List<UpdateUserDTO>();
    private bool isAdmin;
    protected override async Task OnInitializedAsync()
    {

        users = await APIClient.GetFromJsonAsync<List<UpdateUserDTO>>("https://localhost:7218/api/Auth");

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        isAdmin = authState.User.IsInRole("Admin");
        StateHasChanged();
    }



    public async Task DeleteUser(string username)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this user? This action cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<DeleteUserDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                bool deleteSuccess = await APIClient.DeleteAsync($"https://localhost:7218/api/Auth/{username}");

                if (deleteSuccess)
                {
                    users = await APIClient.GetFromJsonAsync<List<UpdateUserDTO>>("https://localhost:7218/api/Auth");
                    Snackbar.Add($"User deleted", Severity.Success);
                    StateHasChanged();
                }
            }
            catch (HttpRequestException ex)
            {
                Snackbar.Add($"Error deleting product: {ex.Message}", Severity.Error);
            }
        }
    }


    public async Task UpdateUser(UpdateUserDTO updatedUser)
    {
        var parameters = new DialogParameters
    {
        { "user", updatedUser }
    };


        var dialog = await DialogService.ShowAsync<UpdateUserDialog>("Update User", parameters);
        var result = await dialog.Result;


    }



}
