@page "/checkout"
@inject ISnackbar Snackbar
@inject APIClient ApiClient
@inject CartService CartService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<h3>Checkout</h3>

<EditForm Model="@customer" OnValidSubmit="SubmitCustomerAndOrder">
    <DataAnnotationsValidator />
    <MudStack Row="true">
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Customer Information</MudText>
                        <MudTextField Label="First Name" @bind-Value="customer.FirstName" />
                        <MudTextField Label="Last Name" @bind-Value="customer.LastName" />
                        <MudTextField Label="Phone Number" @bind-Value="customer.PhoneNumber" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Address Information</MudText>
                        <MudTextField Label="Address" @bind-Value="customer.AddressInformation.Address" />
                        <MudTextField Label="Post Number" @bind-Value="customer.AddressInformation.PostNumber" />
                        <MudTextField Label="City" @bind-Value="customer.AddressInformation.City" />
                        <MudTextField Label="Country" @bind-Value="customer.AddressInformation.Country" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Order Information</MudText>
                        <MudTextField Label="Order Date" Disabled @bind-Value="order.OrderDate" />
                        <MudTextField Label="Total Amount" Disabled @bind-Value="order.TotalAmount" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.subtitle2">Order Summary</MudText>
                    <MudList T="OrderDetailDTO">
                        @foreach (var item in order.OrderDetails)
                        {
                            <MudListItem T="OrderDetailDTO">
                                <MudText>Product: @item.ProductName</MudText>
                                <MudText>ID: @item.ProductID</MudText>
                                <MudText>Qty: @item.Quantity</MudText>
                                <MudText>Price: @item.Price</MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudButton Disabled="@empty"
                           ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="ml-auto">
                    Submit Order
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudStack>
</EditForm>

<MudSnackbarProvider />

@code {
    private CustomerDTO customer = new()
        {
            FirstName = "",
            LastName = "",
            Email = "",
            PhoneNumber = "",
            AddressInformation = new AddressDTO()
        };
    private OrderDTO order = new();
    private bool empty = false;
    private string username = "";

    protected override async Task OnInitializedAsync()
    {
        await CartService.LoadCart();

        order = new OrderDTO
            {
                OrderDate = DateTime.Now,
                OrderDetails = CartService.CartItems.Select(p => new OrderDetailDTO
                {
                    ProductName = p.ProductName,
                    ProductID = p.ProductId,
                    Quantity = 1,
                    Price = p.Price
                }).ToList()
            };

        empty = !order.OrderDetails.Any();
        order.TotalAmount = order.OrderDetails.Sum(i => i.Price * i.Quantity);

        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        username = auth.User.Identity?.Name ?? "";

        var userDto = await ApiClient.GetFromJsonAsync<UserDTO>(
            $"https://localhost:7218/api/Auth/get-user/{Uri.EscapeDataString(username)}");

        CustomerDTO existing = null;
        try
        {
            existing = await ApiClient.GetFromJsonAsync<CustomerDTO>(
                $"https://localhost:7218/api/Customer/{Uri.EscapeDataString(userDto.Email)}");
        }
        catch { }

        if (existing == null)
        {
            customer.Email = userDto.Email;
            customer.FirstName = userDto.Username;
            var created = await ApiClient.PostAsync<CustomerDTO, CustomerDTO>(
                "https://localhost:7218/api/Customer",
                customer);
            customer = created ?? customer;
        }
        else
        {
            customer = existing;
        }
    }

    private async Task SubmitCustomerAndOrder()
    {
        try
        {
            await ApiClient.PutAsync<string, CustomerDTO>(
                $"https://localhost:7218/api/Customer/{Uri.EscapeDataString(customer.Email)}",
                customer);
        }
        catch
        {
            Snackbar.Add("Failed to save your address", Severity.Error);
        }

        order.CustomerID = customer.Id;
        order.Customer = customer;

        var response = await ApiClient.PostAsync<OrderDTO, OrderDTO>(
            "https://localhost:7218/api/Order",
            order);

        if (response != null)
        {
            await CartService.ClearCart();
            Snackbar.Add($"Order #{response.OrderID} submitted!", Severity.Success);
            Navigation.NavigateTo("/");
        }
        else
        {
            Snackbar.Add("Order submission failed", Severity.Error);
        }
    }
}
